# Copyright (C) 2024 Antonio Rodriguez
# 
# This file is part of T1DM_WARIFA.
# 
# T1DM_WARIFA is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# T1DM_WARIFA is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with T1DM_WARIFA.  If not, see <http://www.gnu.org/licenses/>.

"""The execution of this script generates a .csv file with the format of the Abbot-generated files.
Only CGM data is include, and readings are generated every 15 minutes, as the data that have 
been used for the development of this tool. Everytime this script is executed, a new file is generated,
just in case someone wants to use this with different files. CGM lectures are fake, and its shape and 
trends do not intend to imitate real individual's phisiolgy or interstitial glucose patterns. This is jusy
for testing purposes. No interruptions will be generated, and a year and a half data is generated to be able
to generate the AI model and provide a new prediction with newer data. The file name corresponds to the format
generated by Abbot's: IDXXX_SXXX_RXXX_glucose_dd-mm-yyyy.csv. 
"""

import pandas as pd
import numpy as np

# Declare a dataframe 
df = pd.DataFrame()

# Filename (format: IDXXX_SXXX_RXXX_glucose_dd-mm-yyyy.csv)
# ID, S and R is a random number between 0 and 999
id = np.random.randint(0, 999)
s = np.random.randint(0, 999)
r = np.random.randint(0, 999)

# Date
day = np.random.randint(1, 28) # Just to avoid 30th February
month = np.random.randint(1, 12)
year = np.random.randint(2023, 2025)

filename = f"ID{id}_S{s}_R{r}_glucose_{day}-{month}-{year}.csv"

# This is the string that represents all columns in the file (separated by commas)
# first_row = "Dispositivo,Número de serial,Sello de tiempo del dispositivo,Tipo de registro,Historial de glucosa mg/dL,Escaneo de glucosa mg/dL,Insulina de acción rápida no numérica,Insulina de acción rápida (unidades),Alimento no numérico,Carbohidratos (gramos),Carbohidratos (porciones),Insulina de acción larga no numérica,Insulina de acción larga (unidades),Notas,Tira reactiva para glucosa mg/dL,Cuerpos cetónicos mmol/L,Comida e insulina (unidades),Insulina de corrección (unidades),Insulina del cambio de usuario (unidades)"
first_row = "Dispositivo,NÃºmero de serial,Sello de tiempo del dispositivo,Tipo de registro,Historial de glucosa mg/dL,Escaneo de glucosa mg/dL,Insulina de acciÃ³n rÃ¡pida no numÃ©rica,Insulina de acciÃ³n rÃ¡pida (unidades),Alimento no numÃ©rico,Carbohidratos (gramos),Carbohidratos (porciones),Insulina de acciÃ³n larga no numÃ©rica,Insulina de acciÃ³n larga (unidades),Notas,Tira reactiva para glucosa mg/dL,Cuerpos cetÃ³nicos mmol/L,Comida e insulina (unidades),Insulina de correcciÃ³n (unidades),Insulina del cambio de usuario (unidades)"

# Merge day, month and year to create a date and substract 1'5 year to create the randoms CGM samples with their timestamps 
date = f"{day}/{month}/{year} 00:00:00"

# From string to datetime
date = pd.to_datetime(date, dayfirst=True)

# Substract 1.5 years to the date 
first_record_date = date - pd.DateOffset(years=1, months=6)

# Declaration of the list with the first row inside, which are actually the columns of the csv 
fake_cgm = [first_row]

# Auxiliary variable to add 15 minutes to the timestamp of each iteration 
current_date = first_record_date

# First CGM sample (random int bewteen 30 and 300)
curr_cgm_sample = np.random.randint(30, 300)

while(current_date < date):

    # Datetime does not respect the day/month/year format, so we convert it to string before write the csv
    current_date_str = current_date.strftime("%d-%m-%Y %H:%M")

    # Add a new row to the list with the current date and a random value between 30 and 300
    fake_cgm.append("Free Style Libre 2,sensor_serial_number,{},0,{},,,,,,,,,,,,,,".format(current_date_str, curr_cgm_sample)) #  0 in Abbott represents CGM reading

    # Add 15 minutes to the current date
    current_date = current_date + pd.DateOffset(minutes=15, seconds=00)

    # Update the current CGM sample within a certain range 
    curr_cgm_sample = np.random.randint(curr_cgm_sample - 30, curr_cgm_sample + 30)

    # Make sure that number does not go below 30 or above 300
    if curr_cgm_sample < 30:
        curr_cgm_sample = 30
    elif curr_cgm_sample > 300:
        curr_cgm_sample = 300

# Save list as .csv file 
with open(filename, 'w') as file:
    for line in fake_cgm:
        file.write(line + '\n')



